{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jan1\\\\Desktop\\\\HTML\\\\quiz-react\\\\src\\\\Quiz.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Question from './Question';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Quiz() {\n  _s();\n\n  const [questions, setQuestions] = React.useState([]);\n  React.useEffect(() => {\n    async function getQuestions() {\n      const res = await fetch('https://opentdb.com/api.php?amount=10');\n      const data = await res.json();\n      setQuestions(data.results.map((question, id) => ({\n        id: id,\n        question: question.question,\n        correct: question.correct_answer,\n        answers: [question.correct_answer, ...question.incorrect_answers]\n      }))); //shuffling an answers\n\n      setQuestions(oldQuestions => oldQuestions.map(question => {\n        const answersArr = shuffle(question.answers);\n        return { ...question,\n          answers: answersArr\n        };\n      }));\n\n      function shuffle(shuffleArr) {\n        let currentIndex = shuffleArr.length,\n            randomIndex;\n\n        while (currentIndex !== 0) {\n          randomIndex = Math.floor(Math.random() * currentIndex);\n          currentIndex--;\n          [shuffleArr[currentIndex], shuffleArr[randomIndex]] = [shuffleArr[randomIndex], shuffleArr[currentIndex]];\n        }\n\n        return shuffleArr;\n      }\n\n      setQuestions(oldQuestions => oldQuestions.map(question => {\n        const answersArr = [];\n        question.answers.map(answer => answersArr.push({\n          id: nanoid(),\n          answer: answer,\n          selected: false\n        }));\n        return { ...question,\n          answers: answersArr\n        };\n      }));\n    }\n\n    getQuestions();\n  }, []);\n  console.log(questions);\n\n  function checkCorrect(ans, id) {\n    setQuestions(oldQuestions => oldQuestions.map(question => ({ ...question,\n      answers: question.answers.map(answer => {\n        return answer.id === id ? { ...answer,\n          selected: !answer.selected\n        } : answer;\n      })\n    })));\n    console.log(ans);\n  }\n\n  const allQuestions = questions.map((_ref, key) => {\n    let {\n      id,\n      question,\n      correct,\n      answers\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(Question, {\n      id: id,\n      question: question,\n      correct: correct,\n      answers: answers,\n      checkCorrect: checkCorrect\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"que-container\",\n      children: [allQuestions, /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"que-button\",\n        children: \"Check answers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(Quiz, \"1ery3Y2F+nTWSbC27k3nmjCRtvo=\");\n\n_c = Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["C:/Users/jan1/Desktop/HTML/quiz-react/src/Quiz.js"],"names":["React","Question","nanoid","Quiz","questions","setQuestions","useState","useEffect","getQuestions","res","fetch","data","json","results","map","question","id","correct","correct_answer","answers","incorrect_answers","oldQuestions","answersArr","shuffle","shuffleArr","currentIndex","length","randomIndex","Math","floor","random","answer","push","selected","console","log","checkCorrect","ans","allQuestions","key"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport Question from './Question'\r\nimport { nanoid } from 'nanoid'\r\n\r\nexport default function Quiz() {\r\n    const [questions, setQuestions] = React.useState([])\r\n\r\n    React.useEffect( () => {\r\n        async function getQuestions() {\r\n            const res = await fetch('https://opentdb.com/api.php?amount=10')\r\n            const data = await res.json()\r\n        \r\n            setQuestions(data.results.map((question, id) => ({\r\n                id: id,\r\n                question: question.question,\r\n                correct: question.correct_answer,\r\n                answers: [question.correct_answer, ...question.incorrect_answers]\r\n            })))\r\n\r\n            //shuffling an answers\r\n            setQuestions(oldQuestions => oldQuestions.map(question => {\r\n                const answersArr = shuffle(question.answers)\r\n                return ({\r\n                    ...question,\r\n                    answers: answersArr      \r\n                })\r\n            }\r\n            ))\r\n            \r\n            function shuffle(shuffleArr) {\r\n                let currentIndex = shuffleArr.length,  randomIndex\r\n              \r\n                while (currentIndex !== 0) {\r\n                  randomIndex = Math.floor(Math.random() * currentIndex)\r\n                  currentIndex--\r\n              \r\n                  [shuffleArr[currentIndex], shuffleArr[randomIndex]] \r\n                  = [shuffleArr[randomIndex], shuffleArr[currentIndex]]\r\n                }\r\n                return shuffleArr\r\n            }\r\n\r\n            setQuestions(oldQuestions => oldQuestions.map(question => {\r\n                const answersArr = []\r\n                question.answers.map(answer => answersArr.push({\r\n                    id: nanoid(),\r\n                    answer: answer,\r\n                    selected: false      \r\n            }))\r\n                return ({\r\n                    ...question,\r\n                    answers: answersArr\r\n                })\r\n            }))\r\n\r\n        }\r\n        getQuestions()\r\n    }, [])  \r\n\r\n    console.log(questions)\r\n\r\n    function checkCorrect(ans, id) {\r\n        setQuestions(oldQuestions => oldQuestions.map(question => ({\r\n            ...question,\r\n            answers: question.answers.map(answer => {\r\n                return answer.id === id\r\n                    ? {...answer, selected: !answer.selected}\r\n                    : answer\r\n            })\r\n        })))\r\n        console.log(ans)\r\n    }\r\n\r\n    const allQuestions = questions.map( \r\n        ( {id, question, correct, answers} , key) => {\r\n            return (\r\n                <Question\r\n                    key={key}\r\n                    id={id}\r\n                    question={question}\r\n                    correct={correct}\r\n                    answers={answers}\r\n                    checkCorrect={checkCorrect}\r\n                />\r\n            )\r\n    })\r\n\r\n    return (\r\n        <>  \r\n            <div className='que-container'>\r\n                {allQuestions}\r\n                <button \r\n                    className='que-button'\r\n                >\r\n                    Check answers\r\n                </button>\r\n            </div>\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}