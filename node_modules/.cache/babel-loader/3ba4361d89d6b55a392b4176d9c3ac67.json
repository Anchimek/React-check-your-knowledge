{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jan1\\\\Desktop\\\\HTML\\\\quiz-react\\\\src\\\\Quiz.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Question from './Question';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Quiz() {\n  _s();\n\n  const [questions, setQuestions] = React.useState([]);\n  React.useEffect(() => {\n    async function getQuestions() {\n      const res = await fetch('https://opentdb.com/api.php?amount=10');\n      const data = await res.json();\n      setQuestions(data.results);\n    }\n\n    setQuestions(oldQuestions => oldQuestions.map((question, id) => ({\n      id: id,\n      question: question.question,\n      correct: question.correct_answer,\n      selected: false,\n      answers: [question.correct_answer, ...question.incorrect_answers].map(answer => ({\n        answer,\n        id: nanoid()\n      }))\n    })));\n    getQuestions();\n  }, []);\n\n  function checkCorrect(answer, correct, target, id, answers) {\n    console.log(id);\n    setQuestions(oldQuestions => oldQuestions.map(question => {\n      console.log(question);\n      return question.id === id ? { ...question,\n        selected: !question.selected\n      } : question;\n    }));\n  }\n\n  const allQuestions = questions.map((_ref, key) => {\n    let {\n      id,\n      disabled,\n      question,\n      correct,\n      answers,\n      selected\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(Question, {\n      id: id,\n      selected: selected,\n      question: question,\n      correct: correct,\n      answers: answers.answer,\n      checkCorrect: checkCorrect\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"que-container\",\n      children: [allQuestions, /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"que-button\",\n        children: \"Check answers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(Quiz, \"1ery3Y2F+nTWSbC27k3nmjCRtvo=\");\n\n_c = Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["C:/Users/jan1/Desktop/HTML/quiz-react/src/Quiz.js"],"names":["React","Question","nanoid","Quiz","questions","setQuestions","useState","useEffect","getQuestions","res","fetch","data","json","results","oldQuestions","map","question","id","correct","correct_answer","selected","answers","incorrect_answers","answer","checkCorrect","target","console","log","allQuestions","key","disabled"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,MAAT,QAAuB,QAAvB;;;AAEA,eAAe,SAASC,IAAT,GAAgB;AAAA;;AAC3B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,KAAK,CAACM,QAAN,CAAe,EAAf,CAAlC;AAEAN,EAAAA,KAAK,CAACO,SAAN,CAAiB,MAAM;AACnB,mBAAeC,YAAf,GAA8B;AAC1B,YAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,uCAAD,CAAvB;AACA,YAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AAEAP,MAAAA,YAAY,CAACM,IAAI,CAACE,OAAN,CAAZ;AACH;;AACDR,IAAAA,YAAY,CAACS,YAAY,IAAIA,YAAY,CAACC,GAAb,CAAiB,CAACC,QAAD,EAAWC,EAAX,MAAmB;AAC7DA,MAAAA,EAAE,EAAEA,EADyD;AAE7DD,MAAAA,QAAQ,EAAEA,QAAQ,CAACA,QAF0C;AAG7DE,MAAAA,OAAO,EAAEF,QAAQ,CAACG,cAH2C;AAI7DC,MAAAA,QAAQ,EAAE,KAJmD;AAK7DC,MAAAA,OAAO,EAAE,CAACL,QAAQ,CAACG,cAAV,EAA0B,GAAGH,QAAQ,CAACM,iBAAtC,EAAyDP,GAAzD,CAA6DQ,MAAM,KAAK;AAACA,QAAAA,MAAD;AAASN,QAAAA,EAAE,EAACf,MAAM;AAAlB,OAAL,CAAnE;AALoD,KAAnB,CAAjB,CAAjB,CAAZ;AAOAM,IAAAA,YAAY;AACf,GAfD,EAeG,EAfH;;AAkBA,WAASgB,YAAT,CAAsBD,MAAtB,EAA8BL,OAA9B,EAAuCO,MAAvC,EAA+CR,EAA/C,EAAmDI,OAAnD,EAA4D;AACxDK,IAAAA,OAAO,CAACC,GAAR,CAAYV,EAAZ;AACAZ,IAAAA,YAAY,CAACS,YAAY,IAAIA,YAAY,CAACC,GAAb,CACzBC,QAAQ,IAAI;AACRU,MAAAA,OAAO,CAACC,GAAR,CAAYX,QAAZ;AACA,aAAOA,QAAQ,CAACC,EAAT,KAAgBA,EAAhB,GACC,EAAC,GAAGD,QAAJ;AAAcI,QAAAA,QAAQ,EAAE,CAACJ,QAAQ,CAACI;AAAlC,OADD,GAECJ,QAFR;AAGH,KANwB,CAAjB,CAAZ;AAQH;;AAGD,QAAMY,YAAY,GAAGxB,SAAS,CAACW,GAAV,CACjB,OAAyDc,GAAzD,KAAiE;AAAA,QAA/D;AAACZ,MAAAA,EAAD;AAAKa,MAAAA,QAAL;AAAed,MAAAA,QAAf;AAAyBE,MAAAA,OAAzB;AAAkCG,MAAAA,OAAlC;AAA2CD,MAAAA;AAA3C,KAA+D;AAC7D,wBACI,QAAC,QAAD;AAEI,MAAA,EAAE,EAAEH,EAFR;AAGI,MAAA,QAAQ,EAAEG,QAHd;AAII,MAAA,QAAQ,EAAEJ,QAJd;AAKI,MAAA,OAAO,EAAEE,OALb;AAMI,MAAA,OAAO,EAAEG,OAAO,CAACE,MANrB;AAOI,MAAA,YAAY,EAAEC;AAPlB,OACSK,GADT;AAAA;AAAA;AAAA;AAAA,YADJ;AAWP,GAboB,CAArB;AAeA,sBACI;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,iBACKD,YADL,eAEI;AACI,QAAA,SAAS,EAAC,YADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAYH;;GA7DuBzB,I;;KAAAA,I","sourcesContent":["import React from 'react'\r\nimport Question from './Question'\r\nimport { nanoid } from 'nanoid'\r\n\r\nexport default function Quiz() {\r\n    const [questions, setQuestions] = React.useState([])\r\n\r\n    React.useEffect( () => {\r\n        async function getQuestions() {\r\n            const res = await fetch('https://opentdb.com/api.php?amount=10')\r\n            const data = await res.json()\r\n        \r\n            setQuestions(data.results)\r\n        }\r\n        setQuestions(oldQuestions => oldQuestions.map((question, id) => ({\r\n            id: id,\r\n            question: question.question,\r\n            correct: question.correct_answer,\r\n            selected: false,\r\n            answers: [question.correct_answer, ...question.incorrect_answers].map(answer => ({answer, id:nanoid()}))\r\n        })))\r\n        getQuestions()\r\n    }, [])\r\n\r\n\r\n    function checkCorrect(answer, correct, target, id, answers) {\r\n        console.log(id)\r\n        setQuestions(oldQuestions => oldQuestions.map(\r\n            question => {\r\n                console.log(question)\r\n                return question.id === id\r\n                    ?   {...question, selected: !question.selected}\r\n                    :   question\r\n            }\r\n        ))\r\n    }\r\n\r\n\r\n    const allQuestions = questions.map( \r\n        ( {id, disabled, question, correct, answers, selected} , key) => {\r\n            return (\r\n                <Question\r\n                    key={key}\r\n                    id={id}\r\n                    selected={selected}\r\n                    question={question}\r\n                    correct={correct}\r\n                    answers={answers.answer}\r\n                    checkCorrect={checkCorrect}\r\n                />\r\n            )\r\n    })\r\n\r\n    return (\r\n        <>  \r\n            <div className='que-container'>\r\n                {allQuestions}\r\n                <button \r\n                    className='que-button'\r\n                >\r\n                    Check answers\r\n                </button>\r\n            </div>\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}