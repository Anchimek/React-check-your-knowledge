{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jan1\\\\Desktop\\\\HTML\\\\react-check-your-knowledge\\\\src\\\\Question.js\";\nimport decode from 'html-entities-decode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Question(props) {\n  function className(answer) {\n    if (props.allSelected && !answer.correct && answer.selected) return 'que-answer incorrect';else if (props.allSelected && answer.correct) return 'que-answer correct';else if (answer.selected) return 'que-answer active';else return 'que-answer';\n  }\n\n  const createAnswers = props.answers.map((answer, key) => {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: className(answer),\n      disabled: props.disabled,\n      onClick: e => {\n        e.preventDefault();\n        props.checkSelected(props.id, answer.id);\n      },\n      children: decode(answer.answer)\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 17\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"que-face\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"que-question\",\n        children: decode(props.question)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"que-answers\",\n        children: createAnswers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_c = Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["C:/Users/jan1/Desktop/HTML/react-check-your-knowledge/src/Question.js"],"names":["decode","Question","props","className","answer","allSelected","correct","selected","createAnswers","answers","map","key","disabled","e","preventDefault","checkSelected","id","question"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,sBAAnB;;;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAEpC,WAASC,SAAT,CAAmBC,MAAnB,EAA2B;AACvB,QACIF,KAAK,CAACG,WAAN,IACG,CAACD,MAAM,CAACE,OADX,IAEGF,MAAM,CAACG,QAHd,EAKI,OAAO,sBAAP,CALJ,KAMK,IACDL,KAAK,CAACG,WAAN,IACGD,MAAM,CAACE,OAFT,EAID,OAAO,oBAAP,CAJC,KAKA,IACDF,MAAM,CAACG,QADN,EAGD,OAAO,mBAAP,CAHC,KAIA,OAAO,YAAP;AACR;;AACD,QAAMC,aAAa,GAAGN,KAAK,CAACO,OAAN,CAAcC,GAAd,CAClB,CAACN,MAAD,EAASO,GAAT,KAAiB;AACb,wBACI;AACI,MAAA,SAAS,EAAER,SAAS,CAACC,MAAD,CADxB;AAGI,MAAA,QAAQ,EAAEF,KAAK,CAACU,QAHpB;AAII,MAAA,OAAO,EAAGC,CAAD,IAAO;AACZA,QAAAA,CAAC,CAACC,cAAF;AACAZ,QAAAA,KAAK,CAACa,aAAN,CACIb,KAAK,CAACc,EADV,EAEIZ,MAAM,CAACY,EAFX;AAGF,OATN;AAAA,gBAYKhB,MAAM,CAACI,MAAM,CAACA,MAAR;AAZX,OAESO,GAFT;AAAA;AAAA;AAAA;AAAA,YADJ;AAgBH,GAlBiB,CAAtB;AAqBA,sBACI;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,8BACI;AAAI,QAAA,SAAS,EAAC,cAAd;AAAA,kBAA8BX,MAAM,CAACE,KAAK,CAACe,QAAP;AAApC;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,kBACKT;AADL;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAUH;KAnDuBP,Q","sourcesContent":["import decode from 'html-entities-decode';\r\n\r\nexport default function Question(props) {\r\n\r\n    function className(answer) {\r\n        if (\r\n            props.allSelected\r\n            && !answer.correct\r\n            && answer.selected\r\n        )\r\n            return 'que-answer incorrect'\r\n        else if (\r\n            props.allSelected\r\n            && answer.correct\r\n        )\r\n            return 'que-answer correct'\r\n        else if (\r\n            answer.selected\r\n        )\r\n            return 'que-answer active'\r\n        else return 'que-answer'\r\n    }\r\n    const createAnswers = props.answers.map(\r\n        (answer, key) => {\r\n            return (\r\n                <button\r\n                    className={className(answer)}\r\n                    key={key}\r\n                    disabled={props.disabled}\r\n                    onClick={(e) => {\r\n                        e.preventDefault()\r\n                        props.checkSelected(\r\n                            props.id,\r\n                            answer.id\r\n                    )}\r\n                    }\r\n                >\r\n                    {decode(answer.answer)}\r\n                </button>\r\n            )\r\n        }\r\n    )\r\n\r\n    return (\r\n        <>\r\n            <div className='que-face'>\r\n                <h2 className='que-question'>{decode(props.question)}</h2>\r\n                <div className='que-answers'>\r\n                    {createAnswers}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}