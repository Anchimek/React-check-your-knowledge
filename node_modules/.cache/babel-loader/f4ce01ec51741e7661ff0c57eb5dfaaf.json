{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jan1\\\\Desktop\\\\HTML\\\\quiz-react\\\\src\\\\Quiz.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Question from './Question';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Quiz() {\n  _s();\n\n  const [questions, setQuestions] = React.useState([]);\n  const [buttonDisabled, setButtonDisabled] = React.useState(true);\n  React.useEffect(() => {\n    async function getQuestions() {\n      const res = await fetch('https://opentdb.com/api.php?amount=10');\n      const data = await res.json();\n      setQuestions(data.results.map((question, id) => ({\n        id: id,\n        question: question.question,\n        correct: question.correct_answer,\n        disabled: false,\n        answers: [question.correct_answer, ...question.incorrect_answers]\n      }))); //shuffling an answers\n\n      setQuestions(oldQuestions => oldQuestions.map(question => {\n        const answersArr = shuffle(question.answers);\n        return { ...question,\n          answers: answersArr.map(answer => ({\n            id: nanoid(),\n            answer: answer,\n            selected: false\n          }))\n        };\n      }));\n\n      function shuffle(shuffleArr) {\n        let currentIndex = shuffleArr.length,\n            randomIndex;\n\n        while (currentIndex !== 0) {\n          randomIndex = Math.floor(Math.random() * currentIndex);\n          currentIndex--;\n          [shuffleArr[currentIndex], shuffleArr[randomIndex]] = [shuffleArr[randomIndex], shuffleArr[currentIndex]];\n        }\n\n        return shuffleArr;\n      }\n    }\n\n    getQuestions();\n  }, []);\n\n  function checkSelected(ans, id, targetId) {\n    setQuestions(oldQuestions => oldQuestions.map(question => ({ ...question,\n      disabled: question.id === targetId ? !question.disabled : question.disabled,\n      answers: question.answers.map(answer => {\n        return answer.id === id ? { ...answer,\n          selected: !answer.selected\n        } : answer;\n      })\n    })));\n  }\n\n  const allQuestions = questions.map((_ref, key) => {\n    let {\n      id,\n      question,\n      correct,\n      answers,\n      disabled\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(Question, {\n      id: id,\n      disabled: disabled,\n      question: question,\n      correct: correct,\n      answers: answers,\n      checkSelected: checkSelected\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }, this);\n  });\n  React.useEffect(() => {\n    if (questions.length > 0) {\n      const allSelected = questions.every(question => question.disabled);\n      if (allSelected) setButtonDisabled(false);\n    }\n  }, [questions]);\n\n  function checkAnswers(e) {\n    e.preventDefault();\n    const userAnswers = [];\n    questions.map(question => {\n      question.answers.map(answer => {\n        if (answer.answer === question.correct) console.log(answer);\n      });\n    });\n    questions.map(question => question.answers.map(answer => {\n      if (answer.selected) {\n        userAnswers.push(answer.answer);\n      }\n    }));\n    console.log(userAnswers);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"que-container\",\n      children: [allQuestions, /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"que-button\",\n        disabled: buttonDisabled,\n        onClick: checkAnswers,\n        children: \"Check answers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(Quiz, \"TjeD2wnH3TzTFRyjljCgOJrYDgQ=\");\n\n_c = Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["C:/Users/jan1/Desktop/HTML/quiz-react/src/Quiz.js"],"names":["React","Question","nanoid","Quiz","questions","setQuestions","useState","buttonDisabled","setButtonDisabled","useEffect","getQuestions","res","fetch","data","json","results","map","question","id","correct","correct_answer","disabled","answers","incorrect_answers","oldQuestions","answersArr","shuffle","answer","selected","shuffleArr","currentIndex","length","randomIndex","Math","floor","random","checkSelected","ans","targetId","allQuestions","key","allSelected","every","checkAnswers","e","preventDefault","userAnswers","console","log","push"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport Question from './Question'\r\nimport { nanoid } from 'nanoid'\r\n\r\nexport default function Quiz() {\r\n    const [questions, setQuestions] = React.useState([])\r\n    const [buttonDisabled, setButtonDisabled] = React.useState(true)\r\n\r\n    React.useEffect( () => {\r\n        async function getQuestions() {\r\n            const res = await fetch('https://opentdb.com/api.php?amount=10')\r\n            const data = await res.json()\r\n        \r\n            setQuestions(data.results.map((question, id) => ({\r\n                id: id,\r\n                question: question.question,\r\n                correct: question.correct_answer,\r\n                disabled: false,\r\n                answers: [question.correct_answer, ...question.incorrect_answers]\r\n            })))\r\n\r\n            //shuffling an answers\r\n            setQuestions(oldQuestions => oldQuestions.map(question => {\r\n                const answersArr = shuffle(question.answers)\r\n                return ({\r\n                    ...question,\r\n                    answers: answersArr.map(answer => ({\r\n                        id: nanoid(),\r\n                        answer: answer,\r\n                        selected: false   \r\n                    }))     \r\n                })\r\n            }\r\n            ))\r\n            \r\n            function shuffle(shuffleArr) {\r\n                let currentIndex = shuffleArr.length,  randomIndex\r\n              \r\n                while (currentIndex !== 0) {\r\n                  randomIndex = Math.floor(Math.random() * currentIndex)\r\n                  currentIndex--\r\n              \r\n                  [shuffleArr[currentIndex], shuffleArr[randomIndex]] \r\n                  = [shuffleArr[randomIndex], shuffleArr[currentIndex]]\r\n                }\r\n                return shuffleArr\r\n            }\r\n\r\n        }\r\n        getQuestions()\r\n    }, [])  \r\n\r\n    function checkSelected(ans, id, targetId) {\r\n        setQuestions(oldQuestions => oldQuestions.map(question => ({\r\n            ...question,\r\n            disabled: question.id === targetId \r\n                        ? !question.disabled \r\n                        : question.disabled,\r\n            answers: question.answers.map(answer => {\r\n                return answer.id === id\r\n                    ? {...answer, selected: !answer.selected}\r\n                    : answer\r\n            })\r\n        })))\r\n    }\r\n\r\n    const allQuestions = questions.map( \r\n        ( {id, question, correct, answers, disabled} , key) => {\r\n            return (\r\n                <Question\r\n                    key={key}\r\n                    id={id}\r\n                    disabled={disabled}\r\n                    question={question}\r\n                    correct={correct}\r\n                    answers={answers}\r\n                    checkSelected={checkSelected}\r\n                />\r\n            )\r\n    })\r\n\r\n    React.useEffect( () => {\r\n        if(questions.length > 0) {\r\n            const allSelected = questions.every(\r\n                question => question.disabled\r\n            )\r\n    \r\n            if(allSelected) setButtonDisabled(false)\r\n            \r\n        }\r\n\r\n    }, [questions])\r\n\r\n    function checkAnswers(e) {\r\n        e.preventDefault()\r\n        const userAnswers = []\r\n\r\n        questions.map(question => {\r\n            question.answers.map(answer =>{ \r\n                if(answer.answer === question.correct)\r\n                console.log(answer)    \r\n            })}\r\n        )\r\n\r\n        questions.map(question => \r\n            question.answers.map(answer => {\r\n                if(answer.selected) {\r\n                    userAnswers.push(answer.answer)\r\n            }}\r\n            ))\r\n            console.log(userAnswers)\r\n    }\r\n\r\n    return (\r\n        <>  \r\n            <form className='que-container'>\r\n                {allQuestions}\r\n                <button \r\n                    className='que-button'\r\n                    disabled={buttonDisabled}\r\n                    onClick={checkAnswers}\r\n                >\r\n                    Check answers\r\n                </button>\r\n            </form>\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}