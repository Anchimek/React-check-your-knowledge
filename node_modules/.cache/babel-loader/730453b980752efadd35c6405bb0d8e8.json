{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jan1\\\\Desktop\\\\HTML\\\\react-check-your-knowledge\\\\src\\\\Quiz.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Question from './Question';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Quiz() {\n  _s();\n\n  const [questions, setQuestions] = React.useState([]);\n  const [buttonDisabled, setButtonDisabled] = React.useState(true);\n  const [allSelected, setAllSelected] = React.useState(false);\n  const [newQuestions, setNewQuestions] = React.useState(false);\n  React.useEffect(() => {\n    async function getQuestions() {\n      const res = await fetch('https://opentdb.com/api.php?amount=10');\n      const data = await res.json();\n      setQuestions(data.results.map((question, id) => ({\n        id: id,\n        question: question.question,\n        correct: question.correct_answer,\n        disabled: false,\n        answers: [question.correct_answer, ...question.incorrect_answers]\n      }))); //shuffling an answers\n\n      setQuestions(oldQuestions => oldQuestions.map(question => {\n        const answersArr = shuffle(question.answers);\n        return { ...question,\n          answers: answersArr.map(answer => ({\n            id: nanoid(),\n            answer: answer,\n            selected: false,\n            correct: question.correct === answer ? true : false\n          }))\n        };\n      }));\n\n      function shuffle(shuffleArr) {\n        let currentIndex = shuffleArr.length,\n            randomIndex;\n\n        while (currentIndex !== 0) {\n          randomIndex = Math.floor(Math.random() * currentIndex);\n          currentIndex--;\n          [shuffleArr[currentIndex], shuffleArr[randomIndex]] = [shuffleArr[randomIndex], shuffleArr[currentIndex]];\n        }\n\n        return shuffleArr;\n      }\n    }\n\n    getQuestions().catch(error => console.error(error));\n  }, [newQuestions]);\n\n  function checkSelected(id, targetId, e) {\n    console.log(id);\n    setQuestions(oldQuestions => oldQuestions.map(question => ({ ...question,\n      disabled: question.id === targetId ? !question.disabled : question.disabled,\n      answers: question.answers.map(answer => {\n        return answer.id === id ? { ...answer,\n          selected: !answer.selected\n        } : answer;\n      })\n    })));\n    console.log(questions);\n  }\n\n  const allQuestions = questions.map((_ref, key) => {\n    let {\n      id,\n      question,\n      correct,\n      answers,\n      disabled\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(Question, {\n      id: id,\n      disabled: disabled,\n      question: question,\n      allSelected: allSelected,\n      correct: correct,\n      answers: answers,\n      checkSelected: checkSelected\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }, this);\n  });\n  React.useEffect(() => {\n    if (questions.length > 0) {\n      const allChosen = questions.every(question => question.disabled);\n      if (allChosen) setButtonDisabled(false);\n    }\n  }, [questions]);\n\n  function checkAnswers(e) {\n    e.preventDefault();\n    setAllSelected(true);\n    setButtonDisabled(true);\n  }\n\n  function newGame(e) {\n    e.preventDefault();\n    setAllSelected(false);\n    setNewQuestions(oldState => !oldState);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"que-container\",\n      children: [allQuestions, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"que-button\",\n          disabled: buttonDisabled,\n          onClick: checkAnswers,\n          children: \"Check answers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"home-button\",\n          onClick: e => newGame(e),\n          children: \"New questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(Quiz, \"IDKTmIwvfeRZ2C1AoJYzCvd3ZXg=\");\n\n_c = Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["C:/Users/jan1/Desktop/HTML/react-check-your-knowledge/src/Quiz.js"],"names":["React","Question","nanoid","Quiz","questions","setQuestions","useState","buttonDisabled","setButtonDisabled","allSelected","setAllSelected","newQuestions","setNewQuestions","useEffect","getQuestions","res","fetch","data","json","results","map","question","id","correct","correct_answer","disabled","answers","incorrect_answers","oldQuestions","answersArr","shuffle","answer","selected","shuffleArr","currentIndex","length","randomIndex","Math","floor","random","catch","error","console","checkSelected","targetId","e","log","allQuestions","key","allChosen","every","checkAnswers","preventDefault","newGame","oldState"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport Question from './Question'\r\nimport { nanoid } from 'nanoid'\r\n\r\nexport default function Quiz() {\r\n    const [questions, setQuestions] = React.useState([])\r\n    const [buttonDisabled, setButtonDisabled] = React.useState(true)\r\n    const [allSelected, setAllSelected] = React.useState(false)\r\n    const [newQuestions, setNewQuestions] = React.useState(false)\r\n\r\n    React.useEffect(() => {\r\n        async function getQuestions() {\r\n            const res = await fetch('https://opentdb.com/api.php?amount=10')\r\n            const data = await res.json()\r\n\r\n            setQuestions(data.results.map((question, id) => ({\r\n                id: id,\r\n                question: question.question,\r\n                correct: question.correct_answer,\r\n                disabled: false,\r\n                answers: [question.correct_answer, ...question.incorrect_answers]\r\n            })))\r\n\r\n            //shuffling an answers\r\n            setQuestions(oldQuestions => oldQuestions.map(question => {\r\n                const answersArr = shuffle(question.answers)\r\n                return ({\r\n                    ...question,\r\n                    answers: answersArr.map(answer => ({\r\n                        id: nanoid(),\r\n                        answer: answer,\r\n                        selected: false,\r\n                        correct: question.correct === answer\r\n                            ? true : false\r\n                    }))\r\n                })\r\n            }\r\n            ))\r\n\r\n            function shuffle(shuffleArr) {\r\n                let currentIndex = shuffleArr.length, randomIndex\r\n\r\n                while (currentIndex !== 0) {\r\n                    randomIndex = Math.floor(Math.random() * currentIndex)\r\n                    currentIndex--\r\n\r\n                    [shuffleArr[currentIndex], shuffleArr[randomIndex]]\r\n                        = [shuffleArr[randomIndex], shuffleArr[currentIndex]]\r\n                }\r\n                return shuffleArr\r\n            }\r\n\r\n        }\r\n        getQuestions().catch(error => console.error(error))\r\n    }, [newQuestions])\r\n\r\n    function checkSelected(id, targetId, e) {\r\n        console.log(id)\r\n        setQuestions(oldQuestions => oldQuestions.map(question => ({\r\n            ...question,\r\n            disabled: question.id === targetId\r\n                ? !question.disabled\r\n                : question.disabled,\r\n            answers: question.answers.map(answer => {\r\n                return answer.id === id\r\n                    ? { ...answer, selected: !answer.selected }\r\n                    : answer\r\n            })\r\n        })))\r\n        console.log(questions)\r\n    }\r\n\r\n    const allQuestions = questions.map(\r\n        ({ id, question, correct, answers, disabled }, key) => {\r\n            return (\r\n                <Question\r\n                    key={key}\r\n                    id={id}\r\n                    disabled={disabled}\r\n                    question={question}\r\n                    allSelected={allSelected}\r\n                    correct={correct}\r\n                    answers={answers}\r\n                    checkSelected={checkSelected}\r\n                />\r\n            )\r\n        })\r\n\r\n    React.useEffect(() => {\r\n        if (questions.length > 0) {\r\n            const allChosen = questions.every(\r\n                question => question.disabled\r\n            )\r\n\r\n            if (allChosen) setButtonDisabled(false)\r\n        }\r\n    }, [questions])\r\n\r\n    function checkAnswers(e) {\r\n        e.preventDefault()\r\n        setAllSelected(true)\r\n        setButtonDisabled(true)\r\n    }\r\n\r\n    function newGame(e) {\r\n        e.preventDefault()\r\n        setAllSelected(false)\r\n        setNewQuestions(oldState => !oldState)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form className='que-container'>\r\n                {allQuestions}\r\n                <div className='buttons-container'>\r\n                    <button\r\n                        className='que-button'\r\n                        disabled={buttonDisabled}\r\n                        onClick={checkAnswers}\r\n                    >\r\n                        Check answers\r\n                    </button>\r\n                    <button\r\n                        className='home-button'\r\n                        onClick={e => newGame(e)}\r\n                    >\r\n                        New questions\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}