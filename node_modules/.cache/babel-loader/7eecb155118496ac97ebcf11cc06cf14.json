{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jan1\\\\Desktop\\\\HTML\\\\quiz-react\\\\src\\\\Question.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Question(props) {\n  console.log(props); // const question = props.question.replace(/&quot;/g, '\"').replace(/&#039;/g, `'`)\n\n  const answerArray = props.answers.map(answer => answer.answer);\n  console.log(answerArray);\n\n  const newAnswersArray = function shuffle() {\n    const newArr = [...answerArray];\n    let currentIndex = newArr.length,\n        randomIndex;\n\n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n      [newArr[currentIndex], newArr[randomIndex]] = [newArr[randomIndex], newArr[currentIndex]];\n    }\n\n    return newArr;\n  }; // const test = function testArr() {\n  //     return answersArray().map(answer => \n  //         ({answer: answer, selected: false})\n  // )}\n  //     console.log(test())\n\n\n  const createAnswers = newAnswersArray().map((ans, key) => {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: 'que-answer',\n      onClick: e => props.checkCorrect(e.target.innerText, props.correct, e.target, props.id, props.answers),\n      children: ans\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 21\n    }, this);\n  }); // const createAnswers = props.answers.map( (ans, key) => {\n  //         return (\n  //                     <p\n  //                     className={props.selected \n  //                                 ? 'que-answer active'\n  //                                 : 'que-answer'\n  //                     } \n  //                     key={key} \n  //                     onClick={ \n  //                         e => props.checkCorrect(\n  //                                 e.target.innerText, \n  //                                 props.correct, \n  //                                 e.target, \n  //                                 props.id, \n  //                                 props.answers\n  //                             )\n  //                     }\n  //                 >\n  //                     {ans}\n  //                 </p>\n  //             )\n  //         }\n  //     )\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"que-face\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"que-question\",\n        children: props.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"que-answers\",\n        children: createAnswers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_c = Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["C:/Users/jan1/Desktop/HTML/quiz-react/src/Question.js"],"names":["React","Question","props","console","log","answerArray","answers","map","answer","newAnswersArray","shuffle","newArr","currentIndex","length","randomIndex","Math","floor","random","createAnswers","ans","key","e","checkCorrect","target","innerText","correct","id","question"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACpCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EADoC,CAEpC;;AACA,QAAMG,WAAW,GAAGH,KAAK,CAACI,OAAN,CAAcC,GAAd,CAAkBC,MAAM,IAAIA,MAAM,CAACA,MAAnC,CAApB;AACAL,EAAAA,OAAO,CAACC,GAAR,CAAYC,WAAZ;;AACA,QAAMI,eAAe,GAAG,SAASC,OAAT,GAAmB;AACnC,UAAMC,MAAM,GAAG,CAAC,GAAGN,WAAJ,CAAf;AACA,QAAIO,YAAY,GAAGD,MAAM,CAACE,MAA1B;AAAA,QAAmCC,WAAnC;;AAEA,WAAOF,YAAY,KAAK,CAAxB,EAA2B;AACzBE,MAAAA,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,YAA3B,CAAd;AACAA,MAAAA,YAAY;AAEZ,OAACD,MAAM,CAACC,YAAD,CAAP,EAAuBD,MAAM,CAACG,WAAD,CAA7B,IACE,CAACH,MAAM,CAACG,WAAD,CAAP,EAAsBH,MAAM,CAACC,YAAD,CAA5B,CADF;AAED;;AACD,WAAOD,MAAP;AACP,GAZD,CALoC,CAmBpC;AACA;AACA;AACA;AACA;;;AAEA,QAAMO,aAAa,GAAGT,eAAe,GAAGF,GAAlB,CAClB,CAACY,GAAD,EAAMC,GAAN,KAAc;AACV,wBACQ;AACA,MAAA,SAAS,EAAE,YADX;AAGA,MAAA,OAAO,EACHC,CAAC,IAAInB,KAAK,CAACoB,YAAN,CACGD,CAAC,CAACE,MAAF,CAASC,SADZ,EAEGtB,KAAK,CAACuB,OAFT,EAGGJ,CAAC,CAACE,MAHL,EAIGrB,KAAK,CAACwB,EAJT,EAKGxB,KAAK,CAACI,OALT,CAJT;AAAA,gBAaCa;AAbD,OAEKC,GAFL;AAAA;AAAA;AAAA;AAAA,YADR;AAiBH,GAnBiB,CAAtB,CAzBoC,CA+CpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACI;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,8BACI;AAAI,QAAA,SAAS,EAAC,cAAd;AAAA,kBAA8BlB,KAAK,CAACyB;AAApC;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,kBACKT;AADL;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAUH;KAjFuBjB,Q","sourcesContent":["import React from 'react'\r\n\r\nexport default function Question(props) {\r\n    console.log(props)\r\n    // const question = props.question.replace(/&quot;/g, '\"').replace(/&#039;/g, `'`)\r\n    const answerArray = props.answers.map(answer => answer.answer)\r\n    console.log(answerArray)\r\n    const newAnswersArray = function shuffle() {\r\n            const newArr = [...answerArray]\r\n            let currentIndex = newArr.length,  randomIndex\r\n          \r\n            while (currentIndex !== 0) {\r\n              randomIndex = Math.floor(Math.random() * currentIndex)\r\n              currentIndex--\r\n          \r\n              [newArr[currentIndex], newArr[randomIndex]] \r\n              = [newArr[randomIndex], newArr[currentIndex]]\r\n            }\r\n            return newArr\r\n    }\r\n\r\n    // const test = function testArr() {\r\n    //     return answersArray().map(answer => \r\n    //         ({answer: answer, selected: false})\r\n    // )}\r\n    //     console.log(test())\r\n\r\n    const createAnswers = newAnswersArray().map(\r\n        (ans, key) => {\r\n            return (\r\n                    <button\r\n                    className={'que-answer'} \r\n                    key={key} \r\n                    onClick={ \r\n                        e => props.checkCorrect(\r\n                                e.target.innerText, \r\n                                props.correct, \r\n                                e.target, \r\n                                props.id, \r\n                                props.answers\r\n                            )\r\n                    }\r\n                >\r\n                    {ans}\r\n                </button>\r\n            )\r\n        }\r\n    )\r\n\r\n    // const createAnswers = props.answers.map( (ans, key) => {\r\n    //         return (\r\n    //                     <p\r\n    //                     className={props.selected \r\n    //                                 ? 'que-answer active'\r\n    //                                 : 'que-answer'\r\n    //                     } \r\n    //                     key={key} \r\n    //                     onClick={ \r\n    //                         e => props.checkCorrect(\r\n    //                                 e.target.innerText, \r\n    //                                 props.correct, \r\n    //                                 e.target, \r\n    //                                 props.id, \r\n    //                                 props.answers\r\n    //                             )\r\n    //                     }\r\n    //                 >\r\n    //                     {ans}\r\n    //                 </p>\r\n    //             )\r\n    //         }\r\n    //     )\r\n\r\n    return (\r\n        <>\r\n            <div className='que-face'>\r\n                <h2 className='que-question'>{props.question}</h2>\r\n                <div className='que-answers'>\r\n                    {createAnswers}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}