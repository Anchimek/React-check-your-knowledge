{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jan1\\\\Desktop\\\\HTML\\\\quiz-react\\\\src\\\\Question.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Question(props) {\n  // const question = props.question.replace(/&quot;/g, '\"').replace(/&#039;/g, `'`)\n  const answersArray = function shuffleAnswers() {\n    let currentIndex = props.answers.length,\n        randomIndex; // While there remain elements to shuffle...\n\n    while (currentIndex !== 0) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--; // And swap it with the current element.\n\n      [props.answers[currentIndex], props.answers[randomIndex]] = [props.answers[randomIndex], props.answers[currentIndex]];\n    }\n\n    return props.answers;\n  };\n\n  console.log(answersArray());\n  const createAnswers = props.answers.map((ans, key) => {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: props.selected ? 'que-answer active' : 'que-answer',\n      onClick: e => props.checkCorrect(e.target.innerText, props.correct, e.target, props.id, props.answers),\n      children: ans\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 25\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"que-face\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"que-question\",\n        children: props.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"que-answers\",\n        children: createAnswers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_c = Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["C:/Users/jan1/Desktop/HTML/quiz-react/src/Question.js"],"names":["React","Question","props","answersArray","shuffleAnswers","currentIndex","answers","length","randomIndex","Math","floor","random","console","log","createAnswers","map","ans","key","selected","e","checkCorrect","target","innerText","correct","id","question"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACpC;AACA,QAAMC,YAAY,GAAG,SAASC,cAAT,GAA0B;AACvC,QAAIC,YAAY,GAAGH,KAAK,CAACI,OAAN,CAAcC,MAAjC;AAAA,QAA0CC,WAA1C,CADuC,CAGvC;;AACA,WAAOH,YAAY,KAAK,CAAxB,EAA2B;AAEzB;AACAG,MAAAA,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,YAA3B,CAAd;AACAA,MAAAA,YAAY,GAJa,CAMzB;;AACA,OAACH,KAAK,CAACI,OAAN,CAAcD,YAAd,CAAD,EAA8BH,KAAK,CAACI,OAAN,CAAcE,WAAd,CAA9B,IAA4D,CAC1DN,KAAK,CAACI,OAAN,CAAcE,WAAd,CAD0D,EAC9BN,KAAK,CAACI,OAAN,CAAcD,YAAd,CAD8B,CAA5D;AAED;;AACD,WAAOH,KAAK,CAACI,OAAb;AACH,GAfL;;AAiBMM,EAAAA,OAAO,CAACC,GAAR,CAAYV,YAAY,EAAxB;AAGN,QAAMW,aAAa,GAAGZ,KAAK,CAACI,OAAN,CAAcS,GAAd,CAAmB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC/C,wBACY;AACA,MAAA,SAAS,EAAEf,KAAK,CAACgB,QAAN,GACG,mBADH,GAEG,YAHd;AAMA,MAAA,OAAO,EACHC,CAAC,IAAIjB,KAAK,CAACkB,YAAN,CACGD,CAAC,CAACE,MAAF,CAASC,SADZ,EAEGpB,KAAK,CAACqB,OAFT,EAGGJ,CAAC,CAACE,MAHL,EAIGnB,KAAK,CAACsB,EAJT,EAKGtB,KAAK,CAACI,OALT,CAPT;AAAA,gBAgBCU;AAhBD,OAKKC,GALL;AAAA;AAAA;AAAA;AAAA,YADZ;AAoBC,GArBa,CAAtB;AAwBA,sBACI;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,8BACI;AAAI,QAAA,SAAS,EAAC,cAAd;AAAA,kBAA8Bf,KAAK,CAACuB;AAApC;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,kBACKX;AADL;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAUH;KAxDuBb,Q","sourcesContent":["import React from 'react'\r\n\r\nexport default function Question(props) {\r\n    // const question = props.question.replace(/&quot;/g, '\"').replace(/&#039;/g, `'`)\r\n    const answersArray = function shuffleAnswers() {\r\n            let currentIndex = props.answers.length,  randomIndex;\r\n          \r\n            // While there remain elements to shuffle...\r\n            while (currentIndex !== 0) {\r\n          \r\n              // Pick a remaining element...\r\n              randomIndex = Math.floor(Math.random() * currentIndex);\r\n              currentIndex--;\r\n          \r\n              // And swap it with the current element.\r\n              [props.answers[currentIndex], props.answers[randomIndex]] = [\r\n                props.answers[randomIndex], props.answers[currentIndex]];\r\n            }\r\n            return props.answers\r\n        }\r\n          \r\n          console.log(answersArray());\r\n        \r\n\r\n    const createAnswers = props.answers.map( (ans, key) => {\r\n            return (\r\n                        <p\r\n                        className={props.selected \r\n                                    ? 'que-answer active'\r\n                                    : 'que-answer'\r\n                        } \r\n                        key={key} \r\n                        onClick={ \r\n                            e => props.checkCorrect(\r\n                                    e.target.innerText, \r\n                                    props.correct, \r\n                                    e.target, \r\n                                    props.id, \r\n                                    props.answers\r\n                                )\r\n                        }\r\n                    >\r\n                        {ans}\r\n                    </p>\r\n                )\r\n            }\r\n        )\r\n\r\n    return (\r\n        <>\r\n            <div className='que-face'>\r\n                <h2 className='que-question'>{props.question}</h2>\r\n                <div className='que-answers'>\r\n                    {createAnswers}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}