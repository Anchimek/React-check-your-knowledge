{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jan1\\\\Desktop\\\\HTML\\\\quiz-react\\\\src\\\\Question.js\";\nimport React from 'react';\nimport htmlEntitiesDecoder from 'html-entities-decoder';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Question(props) {\n  function className(answer) {\n    if (props.allSelected && !answer.correct && answer.selected) return 'que-answer incorrect';else if (props.allSelected && answer.correct) return 'que-answer correct';else if (answer.selected) return 'que-answer active';else return 'que-answer';\n  }\n\n  function decodeHtmlEntities() {\n    const decodeQuestions = props.question;\n    decodeQuestions.map(question => {\n      let decode = require(htmlEntitiesDecoder);\n\n      let output = decode(question);\n      decodeQuestions.push(output);\n    });\n    console.log(decodeQuestions);\n  }\n\n  decodeHtmlEntities();\n  const createAnswers = props.answers.map((answer, key) => {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: className(answer),\n      disabled: props.disabled,\n      onClick: () => props.checkSelected(answer, answer.id, props.id),\n      children: answer.answer\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 21\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"que-face\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"que-question\",\n        children: props.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"que-answers\",\n        children: createAnswers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_c = Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["C:/Users/jan1/Desktop/HTML/quiz-react/src/Question.js"],"names":["React","htmlEntitiesDecoder","Question","props","className","answer","allSelected","correct","selected","decodeHtmlEntities","decodeQuestions","question","map","decode","require","output","push","console","log","createAnswers","answers","key","disabled","checkSelected","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;;;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAEpC,WAASC,SAAT,CAAmBC,MAAnB,EAA2B;AACnB,QACIF,KAAK,CAACG,WAAN,IACG,CAACD,MAAM,CAACE,OADX,IAEGF,MAAM,CAACG,QAHd,EAKA,OAAO,sBAAP,CALA,KAMK,IACDL,KAAK,CAACG,WAAN,IACGD,MAAM,CAACE,OAFT,EAIL,OAAO,oBAAP,CAJK,KAKA,IACDF,MAAM,CAACG,QADN,EAGL,OAAO,mBAAP,CAHK,KAIA,OAAO,YAAP;AACZ;;AAGD,WAASC,kBAAT,GAA8B;AAC1B,UAAMC,eAAe,GAAGP,KAAK,CAACQ,QAA9B;AACAD,IAAAA,eAAe,CAACE,GAAhB,CAAoBD,QAAQ,IAAI;AAC5B,UAAIE,MAAM,GAAGC,OAAO,CAACb,mBAAD,CAApB;;AACA,UAAIc,MAAM,GAAGF,MAAM,CAACF,QAAD,CAAnB;AACAD,MAAAA,eAAe,CAACM,IAAhB,CAAqBD,MAArB;AACH,KAJD;AAKAE,IAAAA,OAAO,CAACC,GAAR,CAAYR,eAAZ;AACH;;AACDD,EAAAA,kBAAkB;AAGlB,QAAMU,aAAa,GAAGhB,KAAK,CAACiB,OAAN,CAAcR,GAAd,CAClB,CAACP,MAAD,EAASgB,GAAT,KAAiB;AACb,wBACQ;AACA,MAAA,SAAS,EAAEjB,SAAS,CAACC,MAAD,CADpB;AAGA,MAAA,QAAQ,EAAEF,KAAK,CAACmB,QAHhB;AAIA,MAAA,OAAO,EAAG,MAAMnB,KAAK,CAACoB,aAAN,CACRlB,MADQ,EAERA,MAAM,CAACmB,EAFC,EAGRrB,KAAK,CAACqB,EAHE,CAJhB;AAAA,gBAWCnB,MAAM,CAACA;AAXR,OAEKgB,GAFL;AAAA;AAAA;AAAA;AAAA,YADR;AAeH,GAjBiB,CAAtB;AAoBA,sBACI;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,8BACI;AAAI,QAAA,SAAS,EAAC,cAAd;AAAA,kBAA8BlB,KAAK,CAACQ;AAApC;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,kBACKQ;AADL;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAUH;KAhEuBjB,Q","sourcesContent":["import React from 'react'\r\nimport htmlEntitiesDecoder from 'html-entities-decoder'\r\n\r\nexport default function Question(props) {\r\n\r\n    function className(answer) {\r\n            if(\r\n                props.allSelected \r\n                && !answer.correct \r\n                && answer.selected\r\n            ) \r\n            return 'que-answer incorrect'\r\n            else if (\r\n                props.allSelected \r\n                && answer.correct\r\n            ) \r\n            return 'que-answer correct'\r\n            else if (\r\n                answer.selected\r\n            ) \r\n            return 'que-answer active'\r\n            else return 'que-answer'\r\n    }\r\n\r\n    \r\n    function decodeHtmlEntities() {\r\n        const decodeQuestions = props.question\r\n        decodeQuestions.map(question => {\r\n            let decode = require(htmlEntitiesDecoder)\r\n            let output = decode(question)\r\n            decodeQuestions.push(output)\r\n        })\r\n        console.log(decodeQuestions)\r\n    }\r\n    decodeHtmlEntities()    \r\n\r\n\r\n    const createAnswers = props.answers.map(\r\n        (answer, key) => {\r\n            return (\r\n                    <button\r\n                    className={className(answer)} \r\n                    key={key} \r\n                    disabled={props.disabled}\r\n                    onClick={ () => props.checkSelected(\r\n                            answer,\r\n                            answer.id,\r\n                            props.id\r\n                        )\r\n                    }\r\n                >\r\n                    {answer.answer}\r\n                </button>\r\n            )\r\n        }\r\n    )\r\n\r\n    return (\r\n        <>\r\n            <div className='que-face'>\r\n                <h2 className='que-question'>{props.question}</h2>\r\n                <div className='que-answers'>\r\n                    {createAnswers}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}